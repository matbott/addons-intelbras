#!/usr/bin/env python3
import sys, os, configparser, re
from alarmeitbl.myeventloop import Timeout, Log
from alarmeitbl.tratador import *
from alarmeitbl.tratador_fotos import *
def usage():
    print("Modo de usar: %s <arquivo de configuração>" % sys.argv[0])
    sys.exit(1)
def parse_config():
    if len(sys.argv) < 2:
        usage()
    cfgfile = configparser.ConfigParser()
    cfgfile.read(sys.argv[1])
    if 'receptorip' not in cfgfile:
        usage()
    cfg = cfgfile['receptorip']
    return cfg
config = parse_config()
host = ("" + config['addr']).lower().strip()
port = int(config['port'])
caddr = ("" + config['caddr']).lower().strip()
cport = int(config['cport'])
senha = int(config['senha'])
tam_senha = int(config['tamanho'])
centrais = re.compile("" + config['centrais'])
maxconn = int(config['maxconn'])
#logfile = config["logfile"]
Log.set_level(Log.INFO)
Log.set_file(logfile)
folder_dlfoto = config['folder_dlfoto']
Tratador.tratador_de_fotos = TratadorDeFotos("", folder_dlfoto, caddr, cport, senha, tam_senha)
def valida_central(id_central):
    return centrais.match(id_central)
def centrais_conectadas():
    n = 0
    for h in Handler.items.values():
        if isinstance(h, Tratador):
            if h.central_identificada:
               n += 1
    return n
def valida_maxconn():
    return centrais_conectadas() < maxconn
Tratador.valida_central = valida_central
Tratador.valida_maxconn = valida_maxconn
ev = TCPServerEventLoop((host, port), TCPListener, Tratador)
ev.loop()
